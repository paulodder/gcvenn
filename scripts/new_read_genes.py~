# $ python manage.py read_bruggeman_genes
import django
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist

import csv
from genes.models import *

def return_db(dbname):
    """Tries to retrieve Database instance from db, otherwise makes
    it"""
        try:
            db = Database.objects.get(name=dbname)
        except ObjectDoesNotExist:
            db = Database()
            db.name = dbname
            db.save()
        return db
    
def run(*args):
    with open('csv_files/bronbestand-website-v2.csv', 'r') as f:
        lines = csv.reader(f, delimiter=';') 
        n_of_genes_loaded = 0
        bruggeman = return_db("bruggeman_et_al")
        ct = return_db("ct_db")
        wang = return_db("wang_et_al")
        
        for splitted_line in lines:
            # Check for empty expr value
            if all(len(cell)>0 for cell in splitted_line[:4]):
                try:
                    new_gene = Gene.objects.get(
                        rev_ann=splitted_line[0].strip())
                except ObjectDoesNotExist:
                    new_gene = Gene()
                    new_gene.rev_ann = splitted_line[0].strip()
                    new_gene.Jan_expr = float(splitted_line[1].strip())
                    new_gene.GTE_expr = float(splitted_line[2].strip())
                    new_gene.TCGAN_expr = float(splitted_line[3].strip())
                    # Set values and save gene
                    new_gene.save()
                bruggeman.genes.add(new_gene)

                if splitted_line[4] == '1':
                    wang.genes.add(new_gene)
                if splitted_line[5] == '1':
                    ct.genes.add(new_gene)                    
                n_of_genes_loaded += 1
                if n_of_genes_loaded%500 == 0:
                    print(n_of_genes_loaded)
            else:
                continue # Not all expression values are known so leave out
        print("Saved", n_of_genes_loaded, "genes to the database")
